openapi: 3.0.0
info:
  title: Document Management System
  description: Node.js + MongoDB - DMS
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /user/authenticate:
    post:
      summary: Authenticate account credentials and return a JWT token
      description: Accounts must be verified before authenticating.
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: "azhar1"
                password:
                  type: string
                  example: "1234"
              required:
                - userName
                - password
      responses:
        "200":
          description: Account details, a JWT access token and a refresh token cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The username or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "UserName or password is incorrect"
  /user/register:
    post:
      summary: Register a new user account
      operationId: register
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: "azhar1"
                password:
                  type: string
                  example: "1234"
              required:
                - userName
                - password
      responses:
        "200":
          description: The registration request was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequestError"
  /document/create:
    post:
      summary: Create a new file/folder
      operationId: createDocument
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "file.png"
                content:
                  type: string
                  example: "abcd1234"
                parentDir:
                  type: string
                  example: "5eb12e197e06a76ccdefc121"
                type:
                  type: string
                  example: "File"
              required:
                - name
                - type
      responses:
        "200":
          description: File/Folder creation request was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File created successfully"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequestError"
  /document/move:
    patch:
      summary: Move a file
      operationId: movefile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  example: "5eb12e197e06a76ccdefc121"
                folder:
                  type: string
                  example: "5eb12e197e06a76ccdefc121"
              required:
                - file
      responses:
        "200":
          description: File/Folder creation request was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File moved successfully"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequestError"

  /document/list:
    get:
      summary: Get a list of all files/folders
      description: Restricted to admin users.
      operationId: getAllFilesAndFolders
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: folder
          description: folder id
          example: "5eb12e197e06a76ccdefc121"
          schema:
            type: string
      responses:
        "200":
          description: An array of all files and folder
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    type:
                      type: string
                      example: "File"
                    name:
                      type: string
                      example: "file.jpeg"
                    createdAt:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    updatedAt:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Bad Request"
